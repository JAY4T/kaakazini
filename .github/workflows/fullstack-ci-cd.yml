name: Full Stack CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  ##########################
  # 1. Frontend Build & Deploy
  ##########################
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: npm install --legacy-peer-deps

      - name: Set environment and build React app
        run: |
          echo "Branch: ${{ github.ref }}"
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_PROD_API_URL }}" > .env
            echo "Building for production"
          else
            echo "REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_STAGING_API_URL }}" > .env
            echo "Building for staging"
          fi
          cat .env

          if npm run | grep -q "build"; then
            npm run build
          else
            echo "⚠️ No build script found, skipping build"
          fi

      - name: Deploy frontend
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          PROD_HOST: ${{ secrets.REMOTE_HOST_PROD }}
          STAGING_HOST: ${{ secrets.REMOTE_HOST_STAGING }}
          PROD_FRONTEND_PATH: ${{ secrets.FRONTEND_PATH_PROD }}
          STAGING_FRONTEND_PATH: ${{ secrets.FRONTEND_PATH_STAGING }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          # Set remote host & path
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            REMOTE_HOST=$PROD_HOST
            FRONTEND_PATH=$PROD_FRONTEND_PATH
          else
            REMOTE_HOST=$STAGING_HOST
            FRONTEND_PATH=$STAGING_FRONTEND_PATH
          fi

          # Add host fingerprint
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts 2>/dev/null

          echo "🚀 Deploying frontend to $REMOTE_HOST:$FRONTEND_PATH..."

          if [ -d build ]; then
            rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
              --exclude='.git' --exclude='node_modules' --delete build/ \
              $REMOTE_USER@$REMOTE_HOST:$FRONTEND_PATH
            echo "✅ Frontend deployed successfully!"
          else
            echo "⚠️ No build folder found, skipping frontend deploy"
          fi

   ##########################
# 2. Backend Deploy
##########################
backend:
  runs-on: ubuntu-latest
  needs: frontend
  defaults:
    run:
      working-directory: backend

  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy backend
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        PROD_HOST: ${{ secrets.REMOTE_HOST_PROD }}
        STAGING_HOST: ${{ secrets.REMOTE_HOST_STAGING }}
        PROD_BACKEND_PATH: ${{ secrets.BACKEND_PATH_PROD }}
        STAGING_BACKEND_PATH: ${{ secrets.BACKEND_PATH_STAGING }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        touch ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

        # Set remote host, path & service
        if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
          REMOTE_HOST=$PROD_HOST
          BACKEND_PATH=$PROD_BACKEND_PATH
          SERVICE_NAME="kaakazini-backend"
        else
          REMOTE_HOST=$STAGING_HOST
          BACKEND_PATH=$STAGING_BACKEND_PATH
          SERVICE_NAME="kaakazini-backend-staging"
        fi

        # Add host fingerprint
        ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts 2>/dev/null

        echo "🚀 Deploying backend to $REMOTE_HOST:$BACKEND_PATH..."

        # Sync ONLY backend folder (so requirements.txt is included)
        rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
          --exclude='.git' --exclude='__pycache__' --delete ./ \
          $REMOTE_USER@$REMOTE_HOST:$BACKEND_PATH

        # Run remote setup commands
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << EOF
          set -e
          cd $BACKEND_PATH

          # Ensure Python3, venv and pip are installed
          if ! command -v python3 >/dev/null 2>&1; then
            echo "Python3 not found. Installing..."
            sudo apt update
            sudo apt install -y python3
          fi

          if ! python3 -m venv --help >/dev/null 2>&1; then
            echo "python3-venv not found. Installing..."
            sudo apt install -y python3-venv
          fi

          if ! command -v pip3 >/dev/null 2>&1; then
            echo "pip3 not found. Installing..."
            sudo apt install -y python3-pip
          fi

          # Remove old venv if it exists (broken or wrong permissions)
          rm -rf venv

          # Create fresh virtual environment
          python3 -m venv venv

          # Activate virtual environment
          source venv/bin/activate

          # Upgrade pip and install dependencies
          pip install --upgrade pip
          pip install -r requirements.txt

          # Run Django migrations & collect static files
          python manage.py migrate
          python manage.py collectstatic --noinput

          # Restart backend service
          sudo systemctl restart $SERVICE_NAME
          echo "✅ Backend deployed successfully!"
        EOF
