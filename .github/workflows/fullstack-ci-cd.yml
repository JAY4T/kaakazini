name: Full Stack CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  ##########################
  # 1. Frontend Build & Deploy
  ##########################
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: npm install --legacy-peer-deps

      - name: Set environment and build React app
        run: |
          echo "Branch: ${{ github.ref }}"
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_PROD_API_URL }}" > .env
            echo "Building for production"
          else
            echo "REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_STAGING_API_URL }}" > .env
            echo "Building for staging"
          fi
          cat .env
          if npm run | grep -q "build"; then
            npm run build
          else
            echo "⚠️ No build script found, skipping build"

      - name: Deploy frontend
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          PROD_HOST: ${{ secrets.REMOTE_HOST_PROD }}
          STAGING_HOST: ${{ secrets.REMOTE_HOST_STAGING }}
          PROD_FRONTEND_PATH: ${{ secrets.FRONTEND_PATH_PROD }}
          STAGING_FRONTEND_PATH: ${{ secrets.FRONTEND_PATH_STAGING }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            REMOTE_HOST=$PROD_HOST
            FRONTEND_PATH=$PROD_FRONTEND_PATH
          else
            REMOTE_HOST=$STAGING_HOST
            FRONTEND_PATH=$STAGING_FRONTEND_PATH
          fi

          # Add host to known_hosts safely
          ssh-keygen -R $REMOTE_HOST || true
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

          # Test SSH connection
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "echo SSH connection works!"

          # Deploy frontend using rsync
          if [ -d build ]; then
            rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
              --exclude='.git' --exclude='node_modules' --delete build/ \
              $REMOTE_USER@$REMOTE_HOST:$FRONTEND_PATH
            echo "✅ Frontend deployed successfully!"
          else
            echo "⚠️ No build folder found, skipping frontend deploy"

  ##########################
  # 2. Backend Deploy
  ##########################
  backend:
    runs-on: ubuntu-latest
    needs: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy backend
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          PROD_HOST: ${{ secrets.REMOTE_HOST_PROD }}
          STAGING_HOST: ${{ secrets.REMOTE_HOST_STAGING }}
          PROD_BACKEND_PATH: ${{ secrets.BACKEND_PATH_PROD }}
          STAGING_BACKEND_PATH: ${{ secrets.BACKEND_PATH_STAGING }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            REMOTE_HOST=$PROD_HOST
            BACKEND_PATH=$PROD_BACKEND_PATH
            SERVICE_NAME="kaakazini-backend"
          else
            REMOTE_HOST=$STAGING_HOST
            BACKEND_PATH=$STAGING_BACKEND_PATH
            SERVICE_NAME="kaakazini-backend-staging"
          fi

          ssh-keygen -R $REMOTE_HOST || true
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << 'EOF'
            set -e  # exit on any error
            echo "Deploying backend to $BACKEND_PATH on $REMOTE_HOST..."

            rsync -avz --exclude='.git' --delete ./ $BACKEND_PATH
            cd $BACKEND_PATH

            # Create virtualenv if not exists
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            pip install --upgrade pip
            pip install -r requirements.txt

            python manage.py migrate
            python manage.py collectstatic --noinput

            systemctl restart $SERVICE_NAME
            echo "✅ Backend deployed successfully!"
          EOF
