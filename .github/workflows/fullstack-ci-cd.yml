name: Full Stack CI/CD

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  ##########################
  # 🛡️ 0. Pre-Deploy Check
  ##########################
  precheck:
    name: 🛡️ Pre-Deploy Check (Server Readiness)
    runs-on: ubuntu-latest
    steps:
      - name: Check SSH Connectivity & Environment Health
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST_PROD: ${{ secrets.REMOTE_HOST_PROD }}
          REMOTE_HOST_STAGING: ${{ secrets.REMOTE_HOST_STAGING }}
        run: |
          echo "🔍 Running pre-deployment checks..."

          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $REMOTE_HOST_PROD >> ~/.ssh/known_hosts 2>/dev/null
          ssh-keyscan -H $REMOTE_HOST_STAGING >> ~/.ssh/known_hosts 2>/dev/null

          # Detect which environment we’re targeting
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            REMOTE_HOST=$REMOTE_HOST_PROD
            ENVIRONMENT="Production"
          else
            REMOTE_HOST=$REMOTE_HOST_STAGING
            ENVIRONMENT="Staging"
          fi

          echo "🌍 Checking $ENVIRONMENT server at $REMOTE_HOST..."

          # Test SSH Connection
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "echo ✅ SSH connection OK"

          # Check basic tools
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "
            echo '🔧 Checking installed tools...'
            command -v python3 >/dev/null 2>&1 || { echo '❌ Python3 missing'; exit 1; }
            command -v pip3 >/dev/null 2>&1 || { echo '❌ pip missing'; exit 1; }
            command -v node >/dev/null 2>&1 || { echo '❌ Node.js missing'; exit 1; }
            command -v systemctl >/dev/null 2>&1 || { echo '⚠️ Warning: systemctl not found (ensure service restart works manually)'; }
            echo '✅ Required tools found.'
          "

          # Check .env presence
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "
            if [ -f ~/kaakazini/backend/.env ]; then
              echo '✅ .env file exists on server.'
            else
              echo '❌ .env file missing! Please create it before deploying.'
              exit 1
            fi
          "

          echo "🛡️ All pre-deploy checks passed successfully!"

  ##########################
  # 1. Frontend Build & Deploy
  ##########################
  frontend:
    runs-on: ubuntu-latest
    needs: precheck
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm install --legacy-peer-deps
      - run: CI=false npm run build
      - name: Deploy frontend
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST_PROD: ${{ secrets.REMOTE_HOST_PROD }}
          REMOTE_HOST_STAGING: ${{ secrets.REMOTE_HOST_STAGING }}
          FRONTEND_PATH_PROD: ${{ secrets.FRONTEND_PATH_PROD }}
          FRONTEND_PATH_STAGING: ${{ secrets.FRONTEND_PATH_STAGING }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Detect environment (main = production, dev = staging)
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            REMOTE_HOST=$REMOTE_HOST_PROD
            FRONTEND_PATH=$FRONTEND_PATH_PROD
          else
            REMOTE_HOST=$REMOTE_HOST_STAGING
            FRONTEND_PATH=$FRONTEND_PATH_STAGING
          fi

          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts 2>/dev/null

          echo "🚀 Deploying frontend to $REMOTE_HOST..."
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            build/ $REMOTE_USER@$REMOTE_HOST:$FRONTEND_PATH/

  ##########################
  # 2. Backend Build & Deploy
  ##########################
  backend:
    runs-on: ubuntu-latest
    needs: frontend
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - run: pip install -r requirements.txt

      - name: Deploy backend (preserve .env)
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST_PROD: ${{ secrets.REMOTE_HOST_PROD }}
          REMOTE_HOST_STAGING: ${{ secrets.REMOTE_HOST_STAGING }}
          BACKEND_PATH_PROD: ${{ secrets.BACKEND_PATH_PROD }}
          BACKEND_PATH_STAGING: ${{ secrets.BACKEND_PATH_STAGING }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $REMOTE_HOST_PROD >> ~/.ssh/known_hosts 2>/dev/null
          ssh-keyscan -H $REMOTE_HOST_STAGING >> ~/.ssh/known_hosts 2>/dev/null

          # Detect environment
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            REMOTE_HOST=$REMOTE_HOST_PROD
            BACKEND_PATH=$BACKEND_PATH_PROD
          else
            REMOTE_HOST=$REMOTE_HOST_STAGING
            BACKEND_PATH=$BACKEND_PATH_STAGING
          fi

          echo "🚀 Deploying backend to $REMOTE_HOST..."

          # Sync files but skip .env
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude='.git' --exclude='venv' --exclude='__pycache__' \
            --exclude='.env' --delete ./ $REMOTE_USER@$REMOTE_HOST:$BACKEND_PATH

          # Run remote setup + migrations + restart
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << EOF
            cd $BACKEND_PATH
            echo "✅ Preserving existing .env file"

            # Ensure venv exists
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            python manage.py migrate --noinput
            python manage.py collectstatic --noinput
            sudo systemctl restart kaakazini.service
          EOF

          echo "✅ Backend deployed successfully!"
